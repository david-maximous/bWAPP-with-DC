name: Build Docker Image + Security Scan

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest

    env:
      NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Image Name from Repo
        id: vars
        run: |
          IMAGE_NAME=$(basename $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Install Java + Tools
        run: sudo apt update && sudo apt install -y default-jre unzip curl

      - name: Restore Dependency-Check Cache
        uses: actions/cache@v4
        with:
          path: ~/.dependency-check
          key: dependency-check-cache-${{ env.DC_VERSION }}
          restore-keys: dependency-check-cache-

      - name: Download Dependency-Check CLI
        run: |
          DC_VERSION=$(curl -s https://dependency-check.github.io/DependencyCheck/current.txt)
          curl -Ls -o dc.zip https://github.com/dependency-check/DependencyCheck/releases/download/v${DC_VERSION}/dependency-check-${DC_VERSION}-release.zip
          unzip dc.zip -d dc

      - name: Run OWASP Dependency-Check
        run: |
          mkdir -p reports/Dependency-Check
          ./dc/dependency-check/bin/dependency-check.sh \
            --scan ./app \
            --format "ALL" \
            --out reports/Dependency-Check \
            --prettyPrint \
            --enableRetired \
            --nvdApiKey "${NVD_API_KEY}" \
            --data ~/.dependency-check

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:latest .

      - name: Save Docker Image
        run: |
          mkdir -p image
          docker save $IMAGE_NAME:latest -o image/${IMAGE_NAME}-image.tar

      - name: Upload Docker Image To Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bwapp-docker-image
          path: image/${{ env.IMAGE_NAME }}-image.tar

      - name: Trivy Scan on Docker Image
        run: |
          mkdir -p reports/Trivy
          docker load -i image/${IMAGE_NAME}-image.tar

          trivy image \
            --severity CRITICAL,HIGH \
            --format json -o reports/Trivy/trivy-report.json $IMAGE_NAME:latest

          trivy image \
            --format sarif -o reports/Trivy/trivy-report.sarif $IMAGE_NAME:latest

      - name: Save Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: reports
